# -*- coding: utf-8 -*-
"""BI Bot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KUcFJFzV5Vcwub-VbXR0T-vJeiJqvIE0
"""

!pip install streamlit

# app.py
import streamlit as st
import sqlite3
import pandas as pd
import os
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
import matplotlib.pyplot as plt

# Function to process uploaded files
def upload_and_load_file(uploaded_file):
    if uploaded_file is not None:
        df = pd.read_csv(uploaded_file)
        return df
    else:
        st.warning("Please upload a valid CSV file.")
        return None

# Email sending function
def send_email(to_email, subject, body, attachments):
    try:
        # SMTP Configuration
        smtp_server = "smtp.gmail.com"
        smtp_port = 587
        sender_email = "your-email@gmail.com"
        sender_password = "your-email-password"

        # Email Message
        msg = MIMEMultipart()
        msg["From"] = sender_email
        msg["To"] = to_email
        msg["Subject"] = subject

        # Attach body text
        msg.attach(MIMEText(body, "plain"))

        # Attach files
        for file in attachments:
            attachment = open(file, "rb")
            part = MIMEBase("application", "octet-stream")
            part.set_payload(attachment.read())
            encoders.encode_base64(part)
            part.add_header("Content-Disposition", f"attachment; filename={os.path.basename(file)}")
            msg.attach(part)

        # Send Email
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.starttls()
        server.login(sender_email, sender_password)
        server.sendmail(sender_email, to_email, msg.as_string())
        server.quit()
        st.success(f"Email sent successfully to {to_email}")
    except Exception as e:
        st.error(f"Failed to send email: {e}")

# Streamlit App
st.title("Data Processing Bot")

# Upload Files
st.subheader("Step 1: Upload Files")
file1 = st.file_uploader("Upload DSROW File", type=["csv"])
file2 = st.file_uploader("Upload DSTR File", type=["csv"])

# Query Toggle
st.subheader("Step 2: Choose Operations")
query_enabled = st.checkbox("Run Queries on Data")
visual_enabled = st.checkbox("Create Visualizations")
email_enabled = st.checkbox("Send Results via Email")

# Run Button
if st.button("Run Bot"):
    if file1 and file2:
        # Process Files
        df1 = upload_and_load_file(file1)
        df2 = upload_and_load_file(file2)

        if df1 is not None and df2 is not None:
            # Connect to SQLite
            conn = sqlite3.connect(":memory:")
            df1.to_sql("DSROW", conn, index=False, if_exists="replace")
            df2.to_sql("DSTR", conn, index=False, if_exists="replace")

            if query_enabled:
                query = """
                SELECT "Level One", SUM("Picked Item Price") AS Total_Price
                FROM DSTR
                GROUP BY "Level One"
                ORDER BY Total_Price DESC
                """
                result_df = pd.read_sql_query(query, conn)
                st.subheader("Query Results")
                st.dataframe(result_df)

            if visual_enabled:
                # Create Visualization
                if not result_df.empty:
                    fig, ax = plt.subplots()
                    ax.bar(result_df["Level One"], result_df["Total_Price"])
                    ax.set_title("Total Price by Level One")
                    st.pyplot(fig)

            if email_enabled:
                # Save files
                result_df.to_csv("query_results.csv", index=False)
                fig.savefig("visualization.png")
                # Send Email
                to_email = st.text_input("Recipient Email")
                if st.button("Send Email"):
                    send_email(to_email, "Data Processing Results", "Attached are the query results and visualization.",
                               ["query_results.csv", "visualization.png"])

            conn.close()
    else:
        st.warning("Please upload both files to proceed.")

